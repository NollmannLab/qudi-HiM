# -*- coding: utf-8 -*-
#
# (c) Copyright 2023 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 0.23.0
# Product:       sfx6xxx
# Model-Version: 2.0.0
#
"""
The class Sfx6xxxDeviceBase implements the low level interface of the sensor.
The class Sfx6xxxDevice extends the Sfx6xxxDeviceBase. It provides additional functions to ease the use of the
sensor.
"""

import time
import serial

from core.configoption import ConfigOption
from core.module import Base
from sensirion_shdlc_driver import ShdlcSerialPort
from sensirion_shdlc_driver.errors import ShdlcDeviceError
from sensirion_driver_adapters.shdlc_adapter.shdlc_channel import ShdlcChannel
from sensirion_uart_sfx6xxx.device import Sfx6xxxDevice
from sensirion_uart_sfx6xxx.commands import StatusCode



class MFC(Base):
    _MFC_port = ConfigOption('MFC_port', 'COM4')
    with ShdlcSerialPort(port=_MFC_port, baudrate=115200) as port:
        channel = ShdlcChannel(port)
        sensor = Sfx6xxxDevice(channel)
        sensor.device_reset()
    def __init__(self, config, **kwargs):
        super().__init__(config=config, **kwargs)


    def on_activate(self):
        pass
    def on_deactivate(self):
        pass

    def MFC_ON(self,Flow ):
        """open the MFC valve to calibrate the flow
        @param : Flow in """
        sensor.set_setpoint(Flow)

    def MFC_OFF(self):
        """Close the MFC valve"""
        sensor.close_valve()

    def Measure_average_Flow(self,):
        """ 1 time on 50 measurement"""